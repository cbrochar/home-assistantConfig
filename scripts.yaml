alexa_msg:
  description: "Send a message to all Alexas"
  sequence:
    - data:
        entity_id:
        - media_player.extra_echo
        - media_player.kitchen_echo
        - media_player.bedroom_echo_show
        - media_player.chad_s_aio
        - media_player.davids_echo
        - media_player.girls_echo
        - media_player.living_echo
        - media_player.logans_echo_show
        - media_player.broken_echo
        media_content_id: amzn_sfx_doorbell_chime_01
        media_content_type: sound
      service: media_player.play_media
    - data_template:
        data:
          type: tts
        message: "{{ message }}"
        target:
        - media_player.extra_echo
        - media_player.kitchen_echo
        - media_player.bedroom_echo_show
        - media_player.chad_s_aio
        - media_player.davids_echo
        - media_player.girls_echo
        - media_player.living_echo
        - media_player.logans_echo_show
        - media_player.broken_echo
      service: notify.alexa_media
party:
  alias: party
  sequence:
  - service: switch.turn_on
    data:
      entity_id: switch.patiodisco
  - service: switch.turn_on
    data:
      entity_id: switch.patiofan
  - service: media_player.play_media
    data:  
      entity_id: media_player.adults
      media_content_id: party playlist in adults group,
      media_content_type: AMAZON_MUSIC
end_party:
  alias: party
  sequence:
  - service: switch.turn_off
    data:
      entity_id: switch.patiodisco
  - service: switch.turn_off
    data:
      entity_id: switch.patiofan
  - service: media_player.media_stop
    data:  
      entity_id: media_player.adults
pantry_door_alarm:
  alias: pantry door alarm
  sequence:
  - service: notify.alexa_media
    data:
      data:
        type: tts
      target: 
        - media_player.kitchen_echo
        - media_player.bedroom_echo_show
        - media_player.chad_s_aio
        - media_player.davids_echo
        - media_player.girls_echo
        - media_player.living_echo
        - media_player.logans_echo_show
        - media_player.broken_echo
      message: 'Someone is in the Pantry'
dinnertime:
  alias: Dinnertime
  sequence:
  - service: notify.alexa_media
    data:
      data:
        type: tts
      target: 
        - media_player.kitchen_echo
        - media_player.bedroom_echo_show
        - media_player.chad_s_aio
        - media_player.davids_echo
        - media_player.girls_echo
        - media_player.living_echo
        - media_player.logans_echo_show
        - media_player.broken_echo
      message: 'Dinner is Ready'
  - service: media_player.play_media
    data:
      entity_id: 
        - media_player.kitchen_echo
        - media_player.bedroom_echo_show
        - media_player.chad_s_aio
        - media_player.davids_echo
        - media_player.girls_echo
        - media_player.living_echo
        - media_player.logans_echo_show
        - media_player.broken_echo
      media_content_type: sound
      media_content_id: amzn_sfx_doorbell_chime_01
food_ready:
  alias: food ready
  sequence:
  - service: notify.alexa_media
    data:
      data:
        type: tts
      target: 
        - media_player.kitchen_echo
        - media_player.bedroom_echo_show
        - media_player.chad_s_aio
        - media_player.davids_echo
        - media_player.girls_echo
        - media_player.living_echo
        - media_player.logans_echo_show
        - media_player.broken_echo
      message: 'Food is Ready'
bedtime:
  alias: bedtime
  sequence:
  - service: notify.alexa_media
    data:
      data:
        type: tts
      target: 
        - media_player.kitchen_echo
        - media_player.bedroom_echo_show
        - media_player.chad_s_aio
        - media_player.davids_echo
        - media_player.girls_echo
        - media_player.living_echo
        - media_player.logans_echo_show
        - media_player.broken_echo
      message: 'Ve A Dormir'
showers:
  alias: showers
  sequence:
  - service: notify.alexa_media
    data:
      data:
        type: tts
      target: 
        - media_player.kitchen_echo
        - media_player.bedroom_echo_show
        - media_player.chad_s_aio
        - media_player.davids_echo
        - media_player.girls_echo
        - media_player.living_echo
        - media_player.logans_echo_show
        - media_player.broken_echo
      message: 'Everyone Take Showers'
send_tv_power:
  sequence:
  - data_template:
      payload: '{"Protocol":"NEC","Bits":32,"Data":"0x02FD48B7"}'
      topic: bedroomIR/cmnd/irSend
    service: mqtt.publish
  alias: TV Power
send_tv_volup:
  sequence:
  - service: mqtt.publish
    data_template:
      topic: bedroomIR/cmnd/irSend
      payload: '{"Protocol":"NEC","Bits":32,"Data":"0x02FD58A7"}'
send_tv_voldn:
  sequence:
  - service: mqtt.publish
    data_template:
      topic: bedroomIR/cmnd/irSend
      payload: '{"Protocol":"NEC","Bits":32,"Data":"0x02FD7887"}'
send_tv_input:
  sequence:
  - service: mqtt.publish
    data_template:
      topic: bedroomIR/cmnd/irSend
      payload: '{"Protocol":"NEC","Bits":32,"Data":"0x02FDF00F"}'
goodnight_bedroom:
  sequence:
  - data_template:
      payload: '{"Protocol":"NEC","Bits":32,"Data":"0x02FD48B7"}'
      topic: bedroomIR/cmnd/irSend
    service: mqtt.publish
  - data:
      entity_id: group.bedroom
    service: light.turn_off
  - data:
      entity_id: light.barn1
    service: light.turn_off
  - data:
      entity_id: light.barn2
    service: light.turn_off
  - data:
      entity_id: light.barn3
    service: light.turn_off
  - data:
      entity_id: light.ridge
    service: light.turn_off
  alias: Good Night Bedroom
send_string_rfcode:
  description: "Send a Command to the String RF device"
  sequence:
  - service: mqtt.publish
    data_template:
      topic: string/cmnd/rfcode
      payload: >
       {% if command == "off" %}
         #FFFF03
       {% elif command == "on" %}
         #FFFF01
       {% elif command == "red" %}
         #FFFF04
       {% elif command == "green" %}
         #FFFF05
       {% elif command == "blue" %}
         #FFFF06
       {% elif command == "white" %}
         #FFFF07
       {% elif command == "lime" %}
         #FFFF08
       {% elif command == "cyan" %}
         #FFFF09
       {% elif command == "purple" %}
         #FFFF0A
       {% elif command == "orange" %}
         #FFFF0B
       {% elif command == "dim_up" %}
         #FFFF0C
       {% elif command == "dim_dn" %}
         #FFFF0F
       {% elif command == "fade3" %}
         #FFFF0D
       {% elif command == "jump3" %}
         #FFFF0E
       {% elif command == "fade7" %}
         #FFFF10
       {% elif command == "jump7" %}
         #FFFF11
       {% elif command == "auto" %}
         #FFFF13
       {% elif command == "flash" %}
         #FFFF14
       {% elif command == "speed_up" %}
         #FFFF12
       {% elif command == "speed_dn" %}
         #FFFF15
       {% else %}
         eRRoR
       {% endif %}
######################################################################
# Original Repo : https://github.com/CCOSTAN/Home-AssistantConfig
# Youtube Video description of how I use this script
# https://www.vcloudinfo.com/2018/10/easy-smart-home-gadgets-i-use-for-my.html
######################################################################

######################################################################
# Kulp/falcon/player/KulpController/set/playlist/${PLAYLISTNAME}/start	Starts the playlist (optional payload can be index of item to start with)
# Kulp/falcon/player/KulpController/set/playlist/${PLAYLISTNAME}/next	Forces playing of the next item in the playlist (payload ignored)
# Kulp/falcon/player/KulpController/set/playlist/${PLAYLISTNAME}/prev	Forces playing of the previous item in the playlist (payload ignored)
# Kulp/falcon/player/KulpController/set/playlist/${PLAYLISTNAME}/repeat	If payload is "1", will turn on repeat, otherwise it is turned off
# Kulp/falcon/player/KulpController/set/playlist/${PLAYLISTNAME}/sectionPosition	Payload contains an integer for the position in the playlist (0 based)
# Kulp/falcon/player/KulpController/set/playlist/${PLAYLISTNAME}/stop/now	Forces the playlist to stop immediately. PLAYLISTNAME can be ALLPLAYLISTS.
# Kulp/falcon/player/KulpController/set/playlist/${PLAYLISTNAME}/stop/graceful	Gracefully stop playlist. PLAYLISTNAME can be ALLPLAYLISTS.
# Kulp/falcon/player/KulpController/set/playlist/${PLAYLISTNAME}/stop/afterloop	Allow playlist to finish current loop then stop. PLAYLISTNAME can be ALLPLAYLISTS.
# Kulp/falcon/player/KulpController/event/	Starts the event identified by the payload. The payload format is MAJ_MIN identifying the event.
# Kulp/falcon/player/KulpController/effect/start	Starts the effect named in the payload
# Kulp/falcon/player/KulpController/effect/stop	Stops the effect named in the payload or all effects if payload is empty
# Kulp/falcon/player/KulpController/light/${MODELNAME}/cmd
# Kulp/falcon/player/KulpController/light/${MODELNAME}/state	Control a Pixel Overlay Model via Home Assistant's MQTT Light interface. The Pixel Overlay Model is treated as a RGB light.
######################################################################

monthly_color_scene:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/playlist/name/set
        payload: >
          monthly_
          {%- if states.sensor.flag.state == "True" -%}
          RWB
          {%- elif now().strftime("%m%d")|int == 101 -%}
          new_years_day
          {%- elif now().strftime("%m%d")|int >= 210
          and now().strftime("%m%d")|int <= 214-%}
          valentine
          {%- elif now().strftime("%m%d")|int == 228 -%}
          marti_gras
          {%- elif now().strftime("%m%d")|int == 314 -%}
          pi
          {%- elif now().strftime("%m%d")|int >= 315
          and now().strftime("%m%d")|int <= 317-%}
          st_patty
          {%- elif now().strftime("%m%d")|int >= 328
          and now().strftime("%m%d")|int <= 401-%}
          easter
          {%- elif now().strftime("%m%d")|int == 422 -%}
          st_patty
          {%- elif now().strftime("%m%d")|int == 504 -%}
          starwars
          {%- elif now().strftime("%m%d")|int == 505 -%}
          cinco_de_mayo
          {%- elif now().strftime("%m%d")|int >= 1001
          and now().strftime("%m%d")|int <= 1031-%}
          halloween
          {%- elif now().strftime("%m%d")|int >= 1122
          and now().strftime("%m%d")|int <= 1123-%}
          thanksgiving
          {%- elif now().strftime("%m%d")|int >= 1201
          and now().strftime("%m%d")|int <= 1230-%}
          christmas
          {%- elif now().strftime("%m%d")|int == 1231 -%}
          new_years_day
          {%- else -%}
          standard
          {%- endif -%}_colors
    - delay:
        seconds: 5
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/playlist/repeat/set
        payload: '1'
        retain: false

monthly_color_off:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/playlist/name/set
        payload: 'all_off'
        retain: false
    - delay:
        seconds: 5
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/playlist/repeat/set
        payload: '0'
        retain: false

###################################
###       FALCON PLAYER  script       ###
###################################
falconplayer_start_playlist:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/hassio/start
        payload: '1'
        retain: false
falconplayer_next_seq:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/$(PLAYLISTNAME)/next
        retain: false
falconplayer_prev_seq:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/$(PLAYLISTNAME)/prev
        retain: false  
falconplayer_repeat:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/$(PLAYLISTNAME)/repeat
        payload: '1'
        retain: false 
falconplayer_repeat_off:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/$(PLAYLISTNAME)/repeat
        payload: '0'
        retain: false                 
falconplayer_section_position:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/$(PLAYLISTNAME)/sectionPosition
        payload: '0'
        retain: false            
falconplayer_stop_now:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/$(PLAYLISTNAME)/stop/now
        #payload: 'all_off'
        payload: 'ALLPLAYLISTS'
        retain: false
falconplayer_stop_graceful:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/$(PLAYLISTNAME)/stop/graceful
        #payload: 'all_off'
        payload: 'ALLPLAYLISTS'
        retain: false
falconplayer_stop_afterloop:
  sequence:
    - service: mqtt.publish
      data_template:
        topic: Kulp/falcon/player/KulpController/set/playlist/$(PLAYLISTNAME)/stop/afterloop
        #payload: 'all_off'
        payload: 'ALLPLAYLISTS'
        retain: false
###################################
###       FALCON PLAYER         ###
###################################
